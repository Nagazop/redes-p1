#!/usr/bin/env python3
import asyncio
import re
from tcp import Servidor

nicklist = {}
canais = {}

def validar_nome(nome):
    return re.fullmatch(br'[a-zA-Z][a-zA-Z0-9_-]*', nome) is not None

def responder_ping(conexao, conteudo):
    conexao.enviar(b':server PONG server :' + conteudo + b'\r\n')

def mensagem_bem_vindo(conexao, nick):
    conexao.enviar(b':server 001 %s :Welcome\r\n' % nick)
    conexao.enviar(b':server 422 %s :MOTD File is missing\r\n' % nick)

def erro_nick_invalido(conexao, nick):
    conexao.enviar(b':server 432 * %s :Erroneous nickname\r\n' % nick)

def erro_nick_usado(conexao, nick):
    if conexao.nick == b'':
        conexao.enviar(b':server 433 * %s :Nickname is already in use\r\n' % nick)
    else:
        conexao.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (conexao.nick, nick))

def definir_nick(conexao, nick):
    if conexao.nick != b'':
        conexao.enviar(b':%s NICK %s\r\n' % (conexao.nick, nick))
        del nicklist[conexao.nick.lower()]
    else:
        mensagem_bem_vindo(conexao, nick)
    conexao.nick = nick
    nicklist[nick.lower()] = conexao

def enviar_privmsg_usuario(conexao, destino, mensagem):
    alvo = destino.lower()
    if alvo in nicklist:
        nicklist[alvo].enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.nick, destino, mensagem))

def enviar_privmsg_canal(conexao, canal, mensagem):
    canal_lower = canal.lower()
    membros = canais.get(canal_lower, [])
    if conexao in membros:
        for membro in membros:
            if membro != conexao:
                membro.enviar(b':%s PRIVMSG #%s :%s\r\n' % (conexao.nick, canal, mensagem))

def entrar_canal(conexao, canal):
    canal_lower = canal.lower()
    if canal_lower not in canais:
        canais[canal_lower] = []

    if conexao not in canais[canal_lower]:
        canais[canal_lower].append(conexao)
        join_msg = b':%s JOIN :%s\r\n' % (conexao.nick, b'#' + canal)
        for membro in canais[canal_lower]:
            membro.enviar(join_msg)

    if canal_lower not in conexao.canais:
        conexao.canais.append(canal_lower)

    membros = b' '.join(sorted(m.nick for m in canais[canal_lower]))
    conexao.enviar(b':server 353 %s = #%s :%s\r\n' % (conexao.nick, canal, membros))
    conexao.enviar(b':server 366 %s #%s :End of /NAMES list.\r\n' % (conexao.nick, canal))

def sair_canal(conexao, canal):
    canal_lower = canal.lower()
    if canal_lower in canais and conexao in canais[canal_lower]:
        part_msg = b':%s PART #%s\r\n' % (conexao.nick, canal)
        for membro in canais[canal_lower]:
            membro.enviar(part_msg)
        canais[canal_lower].remove(conexao)
        if canal_lower in conexao.canais:
            conexao.canais.remove(canal_lower)

def sair(conexao):
    for canal in list(conexao.canais):
        if canal in canais:
            if conexao in canais[canal]:
                canais[canal].remove(conexao)
                quit_msg = b':%s QUIT :Connection closed\r\n' % conexao.nick
                for membro in canais[canal]:
                    membro.enviar(quit_msg)

    if conexao.nick.lower() in nicklist:
        del nicklist[conexao.nick.lower()]
    conexao.fechar()

def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)

    conexao.aux += dados  # acumula dados recebidos

    while b'\r\n' in conexao.aux:
        linha, conexao.aux = conexao.aux.split(b'\r\n', 1)
        linha = linha.strip()

        if linha.startswith(b'PING '):
            conteudo = linha[5:]
            responder_ping(conexao, conteudo)

        elif linha.startswith(b'NICK '):
            nick = linha[5:]
            if not validar_nome(nick):
                erro_nick_invalido(conexao, nick)
            elif nick.lower() in nicklist:
                erro_nick_usado(conexao, nick)
            else:
                definir_nick(conexao, nick)

        elif linha.startswith(b'PRIVMSG '):
            resto = linha[8:]
            if b' :' in resto:
                destino, msg = resto.split(b' :', 1)
                if destino.startswith(b'#'):
                    enviar_privmsg_canal(conexao, destino[1:], msg)
                else:
                    enviar_privmsg_usuario(conexao, destino, msg)

        elif linha.startswith(b'JOIN '):
            canal = linha[5:]
            if canal.startswith(b'#') and validar_nome(canal[1:]):
                entrar_canal(conexao, canal[1:])

        elif linha.startswith(b'PART '):
            canal = linha[5:]
            if canal.startswith(b'#'):
                sair_canal(conexao, canal[1:])

        print(f'{conexao} >> {linha}')

def conexao_aceita(conexao):
    conexao.nick = b''
    conexao.canais = []
    conexao.aux = b''
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
