#!/usr/bin/env python3
import asyncio
import re
from tcp import Servidor

usuarios = {}
salas = {}

def nome_valido(nick):
    return re.fullmatch(br'[a-zA-Z][a-zA-Z0-9_-]*', nick) is not None


# Nickname handlers
def nick_invalido(conexao, nick):
    conexao.enviar(b':server 432 * %s :Nick inválido\r\n' % nick)

def nick_em_uso(conexao, nick):
    if not conexao.nick:
        conexao.enviar(b':server 433 * %s :Nickname em uso\r\n' % nick)
    else:
        conexao.enviar(b':server 433 %s %s :Nickname em uso\r\n' % (conexao.nick, nick))

def definir_novo_nick(conexao, nick):
    if not conexao.nick:
        conexao.enviar(b':server 001 %s :Bem-vindo\r\n' % nick)
        conexao.enviar(b':server 422 %s :Sem MOTD\r\n' % nick)
    else:
        conexao.enviar(b':%s NICK %s\r\n' % (conexao.nick, nick))
        del usuarios[conexao.nick.lower()]
    
    usuarios[nick.lower()] = conexao
    conexao.nick = nick


# Mensagens privadas
def enviar_para_sala(conexao, canal, mensagem):
    canal_id = canal.lower()
    membros = salas.get(canal_id, [])
    if conexao in membros:
        for outro in membros:
            if outro != conexao:
                outro.enviar(b':%s PRIVMSG #%s :%s\r\n' % (conexao.nick, canal, mensagem))

def enviar_para_usuario(conexao, destino, mensagem):
    alvo = destino.lower()
    if alvo in usuarios:
        usuarios[alvo].enviar(b':%s PRIVMSG %s :%s\r\n' % (conexao.nick, destino, mensagem))


# Entrar em canal
def erro_canal_invalido(conexao):
    conexao.enviar(b':server 403 canal :Canal inexistente\r\n')

def entrar_no_canal(conexao, canal):
    canal_id = canal.lower()
    if canal_id not in salas:
        salas[canal_id] = []

    if conexao not in salas[canal_id]:
        salas[canal_id].append(conexao)
        msg_join = b':%s JOIN :#%s\r\n' % (conexao.nick, canal)
        for membro in salas[canal_id]:
            membro.enviar(msg_join)

    if canal_id not in conexao.salas:
        conexao.salas.append(canal_id)

    membros = b' '.join(sorted(u.nick for u in salas[canal_id]))
    conexao.enviar(b':server 353 %s = #%s :%s\r\n' % (conexao.nick, canal, membros))
    conexao.enviar(b':server 366 %s #%s :Fim da lista de nomes\r\n' % (conexao.nick, canal))


# Sair de canal
def sair_do_canal(conexao, canal):
    canal_id = canal.lower()
    if canal_id in salas and canal_id in conexao.salas:
        mensagem = b':%s PART #%s\r\n' % (conexao.nick, canal)
        for membro in salas[canal_id]:
            membro.enviar(mensagem)
        salas[canal_id].remove(conexao)
        conexao.salas.remove(canal_id)


# Desconexão
def desconectar(conexao):
    for canal in list(conexao.salas):
        if conexao in salas.get(canal, []):
            salas[canal].remove(conexao)
            mensagem = b':%s QUIT :Desconectado\r\n' % conexao.nick
            for membro in salas[canal]:
                membro.enviar(mensagem)

    if conexao.nick.lower() in usuarios:
        del usuarios[conexao.nick.lower()]

    conexao.fechar()


# Processamento de mensagens
def tratar_dados(conexao, dados):
    if dados == b'':
        return desconectar(conexao)

    linhas = list(filter(None, re.split(rb'(?<=\r\n)', dados)))
    
    for linha in linhas:
        if not linha.endswith(b'\r\n'):
            conexao.buffer += linha
            continue

        mensagem = conexao.buffer + linha
        conexao.buffer = b''

        if mensagem.startswith(b'PING '):
            conteudo = mensagem[5:-2]
            conexao.enviar(b':server PONG server :' + conteudo + b'\r\n')

        elif mensagem.startswith(b'NICK '):
            nick = mensagem[5:-2]
            if not nome_valido(nick):
                nick_invalido(conexao, nick)
            elif nick.lower() in usuarios:
                nick_em_uso(conexao, nick)
            else:
                definir_novo_nick(conexao, nick)

        elif mensagem.startswith(b'PRIVMSG '):
            resto = mensagem[8:-2]
            if b' :' not in resto:
                continue
            alvo, texto = resto.split(b' :', 1)
            if alvo.startswith(b'#'):
                enviar_para_sala(conexao, alvo[1:], texto)
            else:
                enviar_para_usuario(conexao, alvo, texto)

        elif mensagem.startswith(b'JOIN '):
            canal = mensagem[5:-2]
            if canal.startswith(b'#') and nome_valido(canal[1:]):
                entrar_no_canal(conexao, canal[1:])
            else:
                erro_canal_invalido(conexao)

        elif mensagem.startswith(b'PART '):
            canal = mensagem[5:-2]
            if canal.startswith(b'#'):
                sair_do_canal(conexao, canal[1:])

        print(f"{conexao} >> {mensagem.strip()}")

    # PING pendente no final do buffer
    if conexao.buffer.endswith(b'\r\n') and conexao.buffer.startswith(b'PING '):
        conteudo = conexao.buffer[5:-2]
        conexao.enviar(b':server PONG server :' + conteudo + b'\r\n')
        conexao.buffer = b''


# Conexão inicial
def ao_conectar(conexao):
    conexao.nick = b''
    conexao.salas = []
    conexao.buffer = b''
    conexao.registrar_recebedor(tratar_dados)


# Execução do servidor
servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(ao_conectar)
asyncio.get_event_loop().run_forever()
